(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
           
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct

    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      match List.assoc_opt varname env with 
      | Some v -> !v 
      | _ -> raise (EvalError "no value associated with key")
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env)
   
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val (exp) -> exp_to_abstract_string exp
      | Closure (exp, env) -> 
         if printenvp then 
          "Expression: " ^ exp_to_abstract_string exp ^ ", Environment: " ^ env_to_string env
         else exp_to_abstract_string exp
    and env_to_string (env : env) : string =
      match env with 
      | [] -> "{}"
      | (id, value) :: [] -> 
        id ^ " -> " ^ value_to_string !value
      | (id, value) :: tl -> 
        id ^ " -> " ^ value_to_string !value ^ ", " ^ env_to_string tl

  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   


  let eval_unop u operand : expr =
  match operand with
  | Bool b -> if u = Negate then Bool (not b) 
              else raise (EvalError "invalid bool negation")
  | Num n ->  if u = Negate then Num (~-n) 
              else if u = Factorial then   
                  let rec factorial acc n =
                    if n <= 1 then acc
                    else factorial (acc * n) (n - 1)
                  in
                  Num (factorial 1 n)
                else if u = RandInt then Num(Random.int n)                      
              else raise (EvalError "invalid int negation")
  | Float f -> if u = Negate then Float (~-.f) 
              else if u = RandFloat then Float(Random.float f)
              else raise (EvalError "invalid float negation")
  | _ -> raise (EvalError "Operation is invalid for the given operand") ;;
  
  
  let eval_binop op e1 e2 : expr =
    match e1, e2 with
    | Num x, Num y -> 
        (match op with
        | Plus -> Num (x + y)
        | Minus -> Num (x - y)
        | Times -> Num (x * y)
        | Exponent -> 
          let rec int_expnt base pow = 
            if pow = 0 then 1 
            else base * int_expnt base (pow - 1) in 
          Num (int_expnt x y)
        | Equals -> Bool (x = y)
        | LessThan -> Bool (x < y)
        | Divide -> Num (x / y)
        | GreaterThan -> Bool (x > y)
        | Choose -> 
          if y < 0 || x < 0 || y > x then 
            raise (EvalError "invalid binomial coefficient arguments")
          else 
            Binop(Divide, Unop(Factorial, Num x), 
            Binop(Times, Unop(Factorial, Num y), 
            Unop(Factorial, Binop(Minus, Num x, Num y))))
        | _ -> raise (EvalError "invalid int binop operator"))
    | Bool b1, Bool b2 ->
      (match op with 
      | Equals -> Bool (b1 = b2)
      | _ -> raise (EvalError "invalid bool binop operator"))
    | Float x, Float y -> 
        (match op with
        | FlPlus -> Float (x +. y)
        | FlMinus -> Float (x -. y)
        | FlTimes -> Float (x *. y)
        | FlDivide -> Float (x /. y)
        | FlExponent -> Float (x ** y)
        | Equals -> Bool (x = y)
        | LessThan -> Bool (x < y)
        | GreaterThan -> Bool (x > y)
        | _ -> raise (EvalError "invalid float binop operator"))

    | _ -> raise (EvalError "binop on invalid inputs") ;;

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let eval_s (exp : expr) (_env : Env.env) : Env.value =
  let rec eval (exp : expr) : expr = 
  match exp with 
  | Num _ | Bool _ |Float _ | Fun _ -> exp 
  | Var _ -> raise (EvalError "Unbound variable")
  | Unop (u, e) -> eval_unop u (eval e) 
  | Binop (b, e1, e2) -> 
    let ans = eval_binop b (eval e1) (eval e2) in 
    if b = Choose then eval ans 
    else ans
  | Conditional (cond, out1, out2) -> 
    (match eval cond with
    | Bool b -> if b then eval out1 else eval out2 
    | _ -> raise (EvalError "invalid conditional"))
  | Let (var, def, body) -> eval (subst var (eval def) body)
  | Letrec (var, def, body) -> 
      let def_eval = eval def in
      let temp = Letrec (var, def_eval, Var var) in
      let recur = subst var temp def_eval in
      eval (subst var recur body)
  | App (f, e) -> 
      (match (eval f) with 
      | Fun (var, body)-> eval (subst var (eval e) body)
      | _ -> raise (EvalError "invalid application"))
  | Raise | Unassigned -> raise EvalException
  in
  Env.Val (eval exp) ;;

;;
     

let eval_abstract (exp : expr) (env : Env.env) (evaluator): Env.value =
  match exp with
  | Num _ | Bool _  | Float _ -> Env.Val exp
  | Var v -> Env.lookup env v
  | Unop (u, e) -> 
      (match evaluator e env with
      | Env.Val (ex) -> Env.Val (eval_unop u ex)
      | Env.Closure _ -> raise (EvalError "cannot perform unop on closure"))
  | Binop (b, e1, e2) ->
      (match evaluator e1 env, evaluator e2 env with
      | Env.Val (ex1), Env.Val (ex2) -> 
        let ans = eval_binop b ex1 ex2 in 
        if b = Choose then evaluator ans env
        else Env.Val ans
      | _, _ -> raise (EvalError "cannot perform binop on closure"))
  | Conditional (cond, out1, out2) -> 
      (match evaluator cond env with
      | Env.Val (Bool b) -> if b then evaluator out1 env 
                        else evaluator out2 env
      | _ -> raise (EvalError "conditional has non-boolean condition"))
  | Let (x, d, b) -> 
      let vd = evaluator d env in
      let new_env = Env.extend env x (ref vd) in
      evaluator b new_env 
    | Fun _ | Letrec _ | App _ -> raise (EvalError "failure: unable to parse expression")
    | Raise | Unassigned -> raise EvalException ;;


(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

  let rec eval_d (exp : expr) (env : Env.env) : Env.value = 
    match exp with 
    | Num _ | Bool _  | Float _ | Var _ | Unop _
    | Binop _ | Conditional _ | Let _ | Raise | Unassigned -> eval_abstract exp env eval_d
    | Fun _ -> Env.Val exp
    | Letrec (x, d, b) -> 
      let vd = eval_d d env in
      let new_env = Env.extend env x (ref vd) in
      eval_d b new_env 
    | App (p, q) ->
      (match eval_d p env with 
      | Env.Val (Fun (x,b)) ->
        let vq = eval_d q env in 
        let new_env = Env.extend env x (ref vq) in 
        eval_d b new_env 
      | _ -> raise (EvalError "invalid dynamic function application"));;


       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Num _ | Bool _  | Float _ | Var _ | Unop _
  | Binop _ | Conditional _ | Let _ | Raise | Unassigned -> 
    eval_abstract exp env eval_l
  | Fun _ -> Env.close exp env
  | Letrec (x, d, b) -> 
    let new_x = ref (Env.Val Unassigned) in
    let env_x = Env.extend env x new_x in
    let vd = eval_l d env_x in
    new_x := vd ;
    eval_l b env_x 
  | App (p, q) ->
    (match eval_l p env with 
    | Env.Closure (Fun (x,b), lex_env) ->
      let vq = eval_l q env in 
      let new_lex_env = Env.extend lex_env x (ref vq) in 
      eval_l b new_lex_env
    | _ -> raise (EvalError "invalid lexical function application"));;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_d ;;
